#!/bin/sh
# Heavily based on the Slackware 14.2 SlackBuild
#
# Created by: Johannes Schoepfer <slackbuilds[at]schoepfer[dot]info>
#
#
# 
# 
# Modified by: Skin Mox <skin-mox@bol.com.br>
#  
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#
# Official Site: http://www.i3wm.org
#

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=i3
SRCNAME=NOME
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-4.13}
ARCH=${ARCH:-$(uname -m)}
JOBS=${JOBS:--j5}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}
SUFFIX=${SUFFIX:-tar.bz2}

SOURCE="http://i3wm.org/downloads/$PKGNAME-$VERSION.$SUFFIX"

TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|.tgz|)$//')}

if [ ! -e $CWD/$TAR ]; then
    echo -e "[\033[01;32m  Download source tarball  \033[01;37m] "
    echo ""
    echo ""
    sleep 2
fi

# Download source tarball if still not present
if [ ! -e $CWD/$TAR ]; then
   wget -c $SOURCE -O "$CWD/$TAR" || exit 1
fi

FILE=$SOURCE
if [ -e "$FILE" ] ; then
   echo -e "[\033[01;31m  Tarball not found  \033[01;37m]"
   exit 1
fi

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; 
  SLKLDFLAGS="-L/usr/lib64"; 
  LIBDIRSUFFIX="64"; 
  CHOST="x86_64"
fi

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT 

echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo -e "[\033[01;32m  Decompress the source tarball  \033[01;37m] "
echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
sleep 2

# Decompress the source tarball
cd $TMP
tar xvf $CWD/$TAR || exit 1
cd $DIR || exit 1

# Apply some patches
#patch -p1 < $CWD/patches/Makefile.patch --verbose || exit 1

echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo -e "[\033[01;32m  Building  package  \033[01;37m] "
echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
sleep 2

# Building  package
mkdir -p build
( cd build
  CFLAGS="$SLKCFLAGS" \
  ../configure \
    --prefix=/usr \
    --libdir=/usr/lib$LIBDIRSUFFIX \
    --mandir=/usr/man \
    --docdir=/usr/doc/$PKGNAME-$VERSION \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --build=$CHOST-slackware-linux

  # V=1 makes build verbose
  CFLAGS="$SLKCFLAGS" make V=1 $JOBS || exit 1
  make install-strip DESTDIR=$PKG || exit 1
)

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

# Don't clobber the default config
mv $PKG/etc/i3/config $PKG/etc/i3/config.new || exit 1
mv $PKG/etc/i3/config.keycodes $PKG/etc/i3/config.keycodes.new || exit 1

# Make xterm default terminal
sed -i 's/i3-sensible-terminal/xterm/' $PKG/etc/i3/config.new || exit 1

# KDM menu entry
mkdir -p $PKG/usr/share/apps/kdm/sessions
ln -s /usr/share/xsessions/i3.desktop $PKG/usr/share/apps/kdm/sessions/ || exit 1

# Install an xinitrc script
mkdir -p $PKG/etc/X11/xinit
cat $CWD/xinitrc.i3 > $PKG/etc/X11/xinit/xinitrc.i3 || exit 1
chmod 0755 $PKG/etc/X11/xinit/xinitrc.i3

# Also add the slack-desk file to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Add documentation files: readme, changelog and so on
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cp -a DEPENDS LICENSE RELEASE-NOTES-* $PKG/usr/doc/$PKGNAME-$VERSION
cp -a docs/* $PKG/usr/doc/$PKGNAME-$VERSION/txt
( cd $PKG/usr/doc/$PKGNAME-$VERSION/txt
  mv *.html *.png *.css ../html/
  rm i3-pod2html *.conf *.dia
)

# Also add the slackbuild files to the package
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo -e "[\033[01;32m  Building some post-install execution script  \033[01;37m] "
echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo ""
sleep 2

# Building some post-install execution script 


cat <<EOINS >> $PKG/install/doinst.sh
# Handle the incoming configuration files:
config() {
  for infile in \$1; do
    NEW="\$infile"
    OLD="\`dirname \$NEW\`/\`basename \$NEW .new\`"
    # If there's no config file by that name, mv it over:
    if [ ! -r \$OLD ]; then
      mv \$NEW \$OLD
    elif [ "\`cat \$OLD | md5sum\`" = "\`cat \$NEW | md5sum\`" ]; then
      # toss the redundant copy
      rm \$NEW
    fi
    # Otherwise, we leave the .new copy for the admin to consider...
  done
}

config etc/i3/config.new
config etc/i3/config.keycodes.new

EOINS
	
echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh

# Compress the man pages if present
find $PKG/usr/man -type f -exec gzip -9 {} +

echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo -e "[\033[01;32m  Create txz package  \033[01;37m] "
echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
sleep 2

# Create txz package
ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz} " || exit 1
if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi

