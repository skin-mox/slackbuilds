#!/bin/sh
# Heavily based on the Slackware 14.2 SlackBuild
#
# Created by: M.Dinslage <daedra1980@gmail.com>
#
#
# 
# 
# Modified by: Skin Mox <skin-mox@bol.com.br>
#  
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#
# Official Site: http://ioquake3.org/
#

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=ioquake3
PKGNAME1=quake3
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-`date +%Y%m%d`}
#VERSION=${VERSION:-00000000}
VERSION1=${VERSION1:-latest-pk3s}
ARCH=${ARCH:-$(uname -m)}
JOBS=${JOBS:--j5}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}

SRCURL="https://github.com/ioquake/ioq3.git"
SOURCE="ioq3-$VERSION.tar.xz"
SOURCE1=http://files.matchlessgaming.com/misc/$PKGNAME1-$VERSION1.zip

TAR=${TAR:-$(basename $SOURCE1)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|.tgz|)$//')}

# Download git
if [ ! -e $CWD/$SOURCE ]; then
    git clone ${SRCURL} || exit 1
    mv ioq3 ioq3-$VERSION || exit 1
    tar -cvJf ioq3-$VERSION.tar.xz ioq3-$VERSION || exit 1
    rm -rf ioq3-$VERSION
fi

# Download source tarball if still not present
if [ ! -e $CWD/$TAR ]; then
   wget -c $SOURCE1 -O "$CWD/$TAR" || exit 1
fi

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; 
  SLKLDFLAGS="-L/usr/lib64"; 
  LIBDIRSUFFIX="64"; 
  CHOST="x86_64"
fi

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT 

# Decompress the source tarball
cd $TMP
tar xvf $CWD/$SOURCE || exit 1
cd ioq3-$VERSION || exit 1

echo -e "\E[0;32m#####                              \E[0;0m"
echo -e "\E[0;32m+++++ Start SlackBuild $PKGNAME    \E[0;0m"
echo -e "\E[0;32m#####                              \E[0;0m"

LDFLAGS="$SLKLDFLAGS"
CFLAGS="$SLKCFLAGS"
CXXFLAGS="$SLKCFLAGS"

export LANG=en_US.UTF-8
export TZ=UTC

# Apply some patches
# Debian patches, thanx Debian
patch -p1 < $CWD/patches/Add-a-special-vmMagic-that-causes-equivalent-native-.patch  --verbose || exit 1
patch -p1 < $CWD/patches/Add-sv_dorestart-which-can-be-set-by-game-code-to-re.patch  --verbose || exit 1
patch -p1 < $CWD/patches/Let-servers-set-sv_fps-too.patch  --verbose || exit 1
patch -p1 < $CWD/patches/Run-in-a-window-by-default-on-new-installations.patch  --verbose || exit 1
patch -p1 < $CWD/patches/ui-reinstate-minimal-code-to-determine-whether-this-.patch --verbose || exit 1

# Building  package
OPTIONS := \
        BR=build \
		BD=build \
		V=1 \
		USE_CODEC_OPUS=1 \
		USE_CODEC_VORBIS=1 \
		USE_CURL=1 \
		USE_CURL_DLOPEN=0 \
		USE_INTERNAL_LIBS=0 \
		USE_LOCAL_HEADERS=0 \
		USE_OPENAL=1 \
		USE_OPENAL_DLOPEN=0 \
		USE_VOIP=1 \
		BUILD_CLIENT_SMP=1 \
		BUILD_GAME_SO=1 \
		BUILD_GAME_QVM=0 \
		CFLAGS='${CFLAGS} ${CXXFLAGS} ${LDFLAGS}' \
		FULLBINEXT="" \
		NO_STRIP=1

make $JOBS release copyfiles $OPTIONS COPYDIR="$PKG"/usr/share/games/quake3 || exit 1

# update quake3 files to newest point release (1.32)
unzip $CWD/$TAR || exit 1
cp quake3-latest-pk3s/baseq3/*.pk3 $PKG/usr/share/games/quake3/baseq3 || exit 1
cp quake3-latest-pk3s/missionpack/*.pk3 $PKG/usr/share/games/quake3/missionpack || exit 1

mkdir -p $PKG/usr/share/{applications,pixmaps}
cat $CWD/$PKGNAME.desktop > $PKG/usr/share/applications/$PKGNAME.desktop || exit 1
cat $CWD/quake3.png > $PKG/usr/share/pixmaps/quake3.png || exit 1

# Add launcher
mkdir $PKG/usr/games
cat $CWD/launcher.ioquake3 > $PKG/usr/games/ioquake3 || exit 1
chmod 0755 $PKG/usr/games/ioquake3

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

# Also add the slack-desk file to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Add documentation files: readme, changelog and so on
if [ ! -e $PKG/usr/doc/$PKGNAME-$VERSION ]; then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION || exit 1
fi
cp -a ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README TODO $PKG/usr/doc/$PKGNAME-$VERSION

# Also add the slackbuild files to the package
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

# Building some post-install execution script 	
	echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/gtk-update-icon-cache ]; then
  /usr/bin/gtk-update-icon-cache  -f -q /usr/share/icons/hicolor &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh

# Compress the man pages if present
if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

# Find and print dependencies into slack-required file
cd $PKG
if [ -x /usr/bin/requiredbuilder ];then
   requiredbuilder -y -v -b -s  $CWD $PKG
fi

# Create txz package
ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz} " || exit 1
if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi

