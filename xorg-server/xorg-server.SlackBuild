#!/bin/sh
#-- xorg-server for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ xorg-server.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
#
# Modified by: Skin Mox <skin-mox@bol.com.br>
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.x.org/

# Requires (list can be outdated):
#  bigreqsproto >= 1.0.2
#  compositeproto >= 0.3
#  damageproto >= 1.1
#  dmxproto >= 1.2.2
#  dri2proto
#  evieext >= 1.0.2
#  fixesproto >= 4.0
#  font-adobe-75dpi
#  font-cursor-misc
#  font-misc-misc
#  fontsproto >= 2.0.2
#  freetype
#  glproto >= 1.4.17
#  iceauth >= 1.0.2
#  inputproto >= 1.4.2.1
#  kbproto >= 1.0.3
#  libX11 >= 1.2
#  libXau >= 1.0.3
#  libXaw >= 1.0.5
#  libXdmcp >= 1.0.2
#  libXext >= 1.0.5
#  libXfixes >= 4.0.3
#  libXfont >= 1.4.0
#  libXi >= 1.1.3
#  libXmu >= 1.0.4
#  libXpm >= 3.5.7
#  libXrender >= 0.9.4
#  libXres >= 1.0.3
#  libXtst >= 1.0.3
#  libXxf86misc >= 1.0.1
#  libXxf86vm >= 1.0.1
#  libdmx >= 1.0.2
#  libdrm >= 2.4.4
#  liblbxutil >= 1.0.1
#  libxkbfile >= 1.0.4
#  libxkbui >= 1.0.2
#  libxshmfence >= 1.1
#  mesa >= 7.3
#  mkfontdir >= 1.0.3
#  mkfontscale >= 1.0.3
#  pixman >= 0.12.0
#  printproto >= 1.0.3
#  randrproto >= 1.2.1
#  recordproto >= 1.13.2
#  renderproto >= 0.9.3
#  resourceproto >= 1.0.2
#  rgb >= 1.0.1
#  scrnsaverproto >= 1.1.0
#  trapproto >= 3.4.3
#  videoproto >= 2.2.2
#  xauth >= 1.0.2
#  xbitmaps >= 1.0.1
#  xcmiscproto >= 1.1.2
#  xextproto >= 7.0.4
#  xf86bigfontproto >= 1.1.2
#  xf86dgaproto >= 2.0.3
#  xf86driproto >= 2.0.4
#  xf86miscproto >= 0.9.2
#  xf86rushproto >= 1.1.2
#  xf86vidmodeproto >= 2.2.2
#  xineramaproto >= 1.1
#  xinit >= 1.0.5
#  xkeyboard-config >= 1.2
#  xplsprinters >= 1.0.1
#  xproto > =7.0.14
#  xtrans >= 1.0.4

CWD=$(pwd)
TMP=${TMP:-/tmp/xorg-server}

NAME=xorg-server
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
#PKG2=${PKGF}/${NAME}-xdmx
PKG3=${PKGF}/${NAME}-xnest
PKG4=${PKGF}/${NAME}-xvfb
PKG5=${PKGF}/${NAME}-xephyr

VERSION=${VERSION:-1.19.0}
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-$(awk '{print $2}' /etc/slackware-version)}
ARCH=${ARCH:-$(uname -m)}
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${TAG}
#PKGNAME2=${NAME}-xdmx-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${TAG}
PKGNAME3=${NAME}-xnest-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${TAG}
PKGNAME4=${NAME}-xvfb-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${TAG}
PKGNAME5=${NAME}-xephyr-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${TAG}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SRCARCHIVE2=xvfb-run.sh

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_XORG=${MIRROR_XORG:-http://www.x.org/pub}
DL_URL="${MIRROR_XORG}/individual/xserver/${SRCARCHIVE}"
DL_URL2="http://svn.exactcode.de/t2/trunk/package/xorg/${NAME}/${SRCARCHIVE2}"

# if source is not present, download in source rootdir if possible, or in /tmp
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKGF} ]; then
  # Clean up a previous build
    rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${PKG2} ${PKG3} ${PKG4} ${PKG5}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN

#############################################
#
# Bugfixes and new features
#
#############################################
patch -p1 < $CWD/patches/x11.startwithblackscreen.diff --verbose || exit 1
patch -p1 < $CWD/patches/xorg-server.combo.mouse.keyboard.layout.patch --verbose || exit 1



#############################################
#
# End 
#############################################

# Servers to build:
BUILD_SERVERS="--enable-xorg --enable-xvfb --enable-xnest --enable-kdrive --enable-xephyr"
SKIP_SERVERS="--disable-xfake --disable-xfbdev --disable-dmx"

# Default font paths to be used by the X server
DEF_FONTPATH="/usr/share/fonts/local,/usr/share/fonts/TTF,/usr/share/fonts/OTF,/usr/share/fonts/Type1,/usr/share/fonts/misc,/usr/share/fonts/CID,/usr/share/fonts/75dpi/:unscaled,/usr/share/fonts/100dpi/:unscaled,/usr/share/fonts/75dpi,/usr/share/fonts/100dpi,/usr/share/fonts/cyrillic"

# Reconf (don't remove this plz):
autoreconf -vif || exit 1

CFLAGS="${SLKCFLAGS} -fno-omit-frame-pointer" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-static \
  --with-pic \
  --enable-suid-wrapper \
  --with-int10=x86emu \
  --with-default-font-path="${DEF_FONTPATH}" \
  --with-os-name="Slackware 14.2" \
  --with-os-vendor="Slackware Linux Project" \
  --with-xkb-path=/etc/X11/xkb \
  --with-xkb-output=/var/lib/xkb \
  --with-default-font-path="${DEF_FONTPATH}" \
  --with-module-dir=/usr/lib${LIBDIRSUFFIX}/xorg/modules \
  --with-os-name="${SLKDIST} ${SLKVER}" \
  --with-os-vendor="${SLKDIST} Linux Project" \
  --with-builderstring="Build ID: ${NAME} ${VERSION}-${BUILD}${TAG}" \
  --with-xkb-path=/etc/X11/xkb \
  --with-xkb-output=/var/lib/xkb \
  ${BUILD_SERVERS} \
  ${SKIP_SERVERS} \
  --enable-glx-tls \
  --enable-config-udev \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

if [ "$ARCH" = "x86_64" ]; then
  # To prevent the error "No rule to make target `-ldl'"
  sed -i -e 's#-ldl##' hw/xfree86/Makefile
  sed -i -e 's#-lm#-lm -ldl#' hw/xfree86/Makefile
fi


make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/X11/xorg.conf.d ${PKG}/etc/X11/xorg.conf.d
install -m0644 ${CWD}/confd/* ${PKG}/usr/share/X11/xorg.conf.d/ || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/{drivers,extensions}

mkdir -p ${PKG}/usr/share/xorg
install -m 0444 hw/xfree86/common/{vesa,extra}modes ${PKG}/usr/share/xorg/

# Fix xserver location:
mkdir -p ${PKG}/etc/X11

#mkdir -p ${PKG2}/usr/bin
#mv ${PKG}/usr/bin/*dmx* ${PKG2}/usr/bin/ || exit 1

mkdir -p ${PKG3}/usr/bin
mv ${PKG}/usr/bin/Xnest ${PKG3}/usr/bin/ || exit 1

mkdir -p ${PKG4}/usr/bin
mv ${PKG}/usr/bin/Xvfb ${PKG4}/usr/bin/ || exit 1
install -pm 0755 ${CWD}/${SRCARCHIVE2} ${PKG4}/usr/bin/xvfb-run || exit 1

mkdir -p ${PKG5}/usr/bin
mv ${PKG}/usr/bin/Xephyr ${PKG5}/usr/bin/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
  if [ -d ${PKG}/usr/share/doc ]; then
    mv ${PKG}/usr/share/doc/*/* ${DOCDIR}/
    rm -rf ${PKG}/usr/share/doc
    rmdir ${PKG}/usr/share
  fi
cp -a \
  AUTHORS COPYING LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.? *.??
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Find and print dependencies into slack-required file
cd $PKG
if [ -x /usr/bin/requiredbuilder ];then
   requiredbuilder -y -v -b -s  $CWD $PKG
fi

#mkdir -p ${PKG2}/usr/man/man1
#mv ${PKG}/usr/man/man1/*dmx* ${PKG2}/usr/man/man1/ || exit 1

mkdir -p ${PKG3}/usr/man/man1
mv ${PKG}/usr/man/man1/Xnest.1* ${PKG3}/usr/man/man1/ || exit 1

mkdir -p ${PKG4}/usr/man/man1
mv ${PKG}/usr/man/man1/Xvfb.1* ${PKG4}/usr/man/man1/ || exit 1

mkdir -p ${PKG5}/usr/man/man1
mv ${PKG}/usr/man/man1/Xephyr.1* ${PKG5}/usr/man/man1/ || exit 1

for dir in ${PKG} ${PKG3} ${PKG4} ${PKG5} ;do
  mkdir -p ${dir}/install
done
cat ${CWD}/slack-desc/slack-desc > ${PKG}/install/slack-desc || exit 1
cat ${CWD}/slack-required > ${PKG}/install/slack-required || exit 1
#cat ${CWD}/slack-desc/slack-desc.xdmx > ${PKG2}/install/slack-desc || exit 1
cat ${CWD}/slack-desc/slack-desc.xnest > ${PKG3}/install/slack-desc || exit 1
cat ${CWD}/slack-desc/slack-desc.xvfb > ${PKG4}/install/slack-desc || exit 1
cat ${CWD}/slack-desc/slack-desc.xephyr > ${PKG5}/install/slack-desc || exit 1

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
  echo '# Fix permissions' >> ${PKG}/install/doinst.sh
  echo '${CHROOT} /bin/chmod 4755 /usr/libexec/Xorg' >> ${PKG}/install/doinst.sh
)
#echo '${CHROOT} /bin/chmod 4755 /usr/libexec/Xorg.wrap' >> ${PKG}/install/doinst.sh
# Also add the slackbuild files to the package
mkdir -p $PKG/usr/doc/$NAME-$VERSION/SlackBuild
cat $CWD/slack-desc > $PKG/usr/doc/$NAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$NAME.SlackBuild > $PKG/usr/doc/$NAME-$VERSION/SlackBuild/$NAME.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
#ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
#  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS3="set -o errexit -o xtrace ; cd ${PKG3} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS4="set -o errexit -o xtrace ; cd ${PKG4} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS5="set -o errexit -o xtrace ; cd ${PKG5} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
#ROOTCOMMANDS2="${ROOTCOMMANDS2}
#  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.${PKGFORMAT} "
ROOTCOMMANDS3="${ROOTCOMMANDS3}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME3}.${PKGFORMAT} "
ROOTCOMMANDS4="${ROOTCOMMANDS4}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME4}.${PKGFORMAT} "
ROOTCOMMANDS5="${ROOTCOMMANDS5}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME5}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
#  eval ${ROOTCOMMANDS2}
  eval ${ROOTCOMMANDS3}
  eval ${ROOTCOMMANDS4}
  eval ${ROOTCOMMANDS5}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
#  echo ${ROOTCOMMANDS2} | fakeroot
  echo ${ROOTCOMMANDS3} | fakeroot
  echo ${ROOTCOMMANDS4} | fakeroot
  echo ${ROOTCOMMANDS5} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
#  /bin/su -c "${ROOTCOMMANDS2}"
  /bin/su -c "${ROOTCOMMANDS3}"
  /bin/su -c "${ROOTCOMMANDS4}"
  /bin/su -c "${ROOTCOMMANDS5}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} & echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
