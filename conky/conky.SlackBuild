#!/bin/sh
# Heavily based on the Slackware 14.2 SlackBuild
# 
# Modified by: Skin Mox
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#
# Official Site: http://conky.sourceforge.net/
#

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=conky
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-1.10.6}
ARCH=${ARCH:-$(uname -m)}
JOBS=${JOBS:--j5}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}

SOURCE="https://github.com/brndnmtthws/conky/archive/v${VERSION}.tar.gz"

# Download sorce tarball if still not present
if [ ! -e $CWD/${PKGNAME}-${VERSION}.tar.gz ]; then
   wget -c $SOURCE || exit 1
   mv v${VERSION}.tar.gz $PKGNAME-$VERSION.tar.gz || exit 1
fi

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; 
  SLKLDFLAGS="-L/usr/lib64"; 
  LIBDIRSUFFIX="64"; 
  CHOST="x86_64"
fi

# Set to YES to enable audacious support
SB_AUDACIOUS=${SB_AUDACIOUS:-YES}
# Set to YES to enable cmus support
SB_CMUS=${SB_CMUS:-YES}
# Set to YES to enable moc support
SB_MOC=${SB_MOC:-NO}
# Set to YES to enable mpd support
SB_MPD=${SB_MPD:-YES}
# Set to YES to enable mysql support
SB_MYSQL=${SB_MYSQL:-NO}
# Set to YES to enable xmms2 support
SB_XMMS2=${SB_XMMS2:-NO}
# Set to YES to enable hddtemp suppport
SB_HDDTEMP=${SB_HDDTEMP:-YES}
# Set to YES to enable nvidia suppport
SB_NV=${SB_NV:-NO}
# Set to YES to enable rss suppport
SB_RSS=${SB_RSS:-NO}

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT

# Decompress the source tarball
cd $TMP
tar xvf $CWD/$PKGNAME-$VERSION.tar.gz

echo -e "\E[0;32m#####                              \E[0;0m"
echo -e "\E[0;32m+++++ Start SlackBuild $PKGNAME    \E[0;0m"
echo -e "\E[0;32m#####                              \E[0;0m"

cd $PKGNAME-$VERSION

# Arch Linux patch for Lua 5.3, thanx Arch Linux
#patch -p1 < $CWD/patches/lua53.patch --verbose || exit 1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export FFLAGS="${SLKCFLAGS}"

mkdir -p build
( cd build || exit $?

  cmake .. \
        -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
        -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
        -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
        -DCMAKE_INSTALL_PREFIX:PATH=/usr \
        -DSYSCONF_INSTALL_DIR:PATH=/etc \
        -DINCLUDE_INSTALL_DIR:PATH=/usr/include \
        -DLIB_INSTALL_DIR:PATH=/usr/lib${LIBDIRSUFFIX} \
        -DLIB_SUFFIX=${LIBDIRSUFFIX} \
        -DSHARE_INSTALL_PREFIX:PATH=/usr/share \
        -DMAN_INSTALL_DIR:PATH=/usr/man \
        -DCMAKE_BUILD_TYPE=Release \
		-DMAINTAINER_MODE=ON \
		-DBUILD_CURL=ON \
		-DBUILD_XDBE=ON \
		-DBUILD_IMLIB2=ON \
		-DBUILD_RSS=ON \
		-DBUILD_WEATHER_METAR=ON \
		-DBUILD_WEATHER_XOAP=ON \
		-DBUILD_WLAN=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
    || exit 1

  make -j${NJOBS} || make || exit 1
  make install/fast DESTDIR=${PKG} || exit 1

) || exit 1


mkdir -p ${PKG}/etc/${PKGNAME}
install -pm0644 data/conky.conf \
   ${PKG}/etc/${PKGNAME}/${PKGNAME}.conf.new || exit 1

for d in ftdetect syntax ;do
  dir=${PKG}/usr/share/vim/vimfiles/${d}
  mkdir -p ${dir}
  install -m0644 extras/vim/${d}/${PKGNAME}rc.vim ${dir}/ || exit 1
done

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

# Also add the slack-desk file to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Add documentation files: readme, changelog and so on
if [ ! -e $PKG/usr/doc/$PKGNAME-$VERSION ]; then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION || exit 1
fi
cp -a ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README TODO $PKG/usr/doc/$PKGNAME-$VERSION

# Also add the slackbuild files to the package
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

# Building some post-install execution script 	
	echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/gtk-update-icon-cache ]; then
  /usr/bin/gtk-update-icon-cache  -f -q /usr/share/icons/hicolor &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh

# Compress the man pages if present
if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

# Find and print dependencies into slack-required file
cd $PKG
if [ -x /usr/bin/requiredbuilder ];then
  requiredbuilder -y -v -b -s  $CWD $PKG
fi

# Create txz package
ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz} " || exit 1
if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi

