#!/bin/sh
# Heavily based on the Slackware 14.2 SlackBuild
#
# Created by: stormtracknole - stormtracknole@gmail.com
#
#
# Modified by: Niki Kovacs <info@microlinux.fr>
# 
# Modified by: Skin Mox <skin-mox@bol.com.br>
# 
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#
# Official Site: http://www.mltframework.org/
#

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=mlt
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-6.4.1}
ARCH=${ARCH:-$(uname -m)}
JOBS=${JOBS:--j2}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}
PSUFIX=${PSUFIX:-tar.gz}

SOURCE="https://github.com/mltframework/${PKGNAME}/archive/v${VERSION}.${PSUFIX}"
PFILE=${PKGNAME}-${VERSION}.${PSUFIX}

TAR=${TAR:-$(basename $SOURCE)}

# Download source tarball if still not present
if [ ! -e $CWD/$PFILE ]; then
   wget -c $SOURCE -O "$CWD/$TAR" || exit 1
   mv $TAR $PKGNAME-$VERSION.$PSUFIX
fi

# Autodetect which SWIG Languages bindings to build
# according to what's installed on the system:
if [ -f "$(which javac)" ]; then java="java"; else java=""; fi
if [ -f "$(which lua)" ]; then lua="lua"; else lua=""; fi
if [ -f "$(which perl)" ]; then perl="perl"; else perl=""; fi
if [ -f "$(which php)" ]; then php="php"; else php=""; fi
if [ -f "$(which python)" ]; then python="python"; else python=""; fi
if [ -h "$(which tclsh)" ]; then tcl="tcl"; else tcl=""; fi
if [ -f "$(which csharp)" ]; then csharp="csharp"; else csharp=""; fi
if [ -f "$(which ruby)" ]; then ruby="ruby"; else ruby=""; fi

if pkg-config --exists vdpau ; then vdpau="--avformat-vdpau" ; else vdpau="" ; fi

# Use qt5 if present, otherwise system default
if pkg-config --exists Qt5 ; then
  qt="--qt-libdir=$(pkg-config Qt5 --variable=libdir)
      --qt-includedir=$(pkg-config Qt5 --variable=headerdir)"
else
  qt="--qt-libdir=$(pkg-config Qt --variable=libdir)
      --qt-includedir=$(pkg-config Qt --variable=headerdir)"
fi

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; 
  SLKLDFLAGS="-L/usr/lib64"; 
  LIBDIRSUFFIX="64"; 
  CHOST="x86_64"
fi

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT 

# Decompress the source tarball
cd $TMP
tar xvf $CWD/$PKGNAME-$VERSION.tar.gz || exit 1
cd $PKGNAME-$VERSION || exit 1

echo -e "\E[0;32m#####                              \E[0;0m"
echo -e "\E[0;32m+++++ Start SlackBuild $PKGNAME    \E[0;0m"
echo -e "\E[0;32m#####                              \E[0;0m"

# Apply some patches
patch -p1 < $CWD/patches/mlt-6.2.0-ruby-link.patch --verbose || exit 1

# respect CFLAGS LDFLAGS when building shared libraries. Bug #308873
for x in python lua; do
	sed -i "/mlt.so/s: -lmlt++ :& ${CFLAGS} ${LDFLAGS} :" src/swig/$x/build || exit 1
done
sed -i "/^LDFLAGS/s: += :& ${LDFLAGS} :" src/swig/ruby/build || exit 1

# Building  package
LDFLAGS="$SLKLDFLAGS" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
     ./configure 	\
        --disable-debug \
        --prefix=/usr \
        --libdir=/usr/lib${LIBDIRSUFFIX} \
        --enable-gpl \
        --enable-gpl3 \
        --luma-compress \
        --enable-motion-est \
        --enable-ffmpeg \
        --disable-avformat \
        --disable-kde \
        $vdpau \
        $qt \
        --swig-languages="$java $lua $perl $php $python $ruby $tcl $csharp" \
        --build=$CHOST-slackware-linux || exit 1

# --avformat-swscale \
		
make clean
CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS -std=c++11" make $JOBS || exit 1
make install DESTDIR=$PKG || exit 1

# Install built bindings
if [ "$lua" ]; then
  ( cd $TMP/$PKGNAME-$VERSION/src/swig/lua
    install -D -m 0755 mlt.so $PKG/$(pkg-config --variable INSTALL_CMOD lua)/mlt.so
    install -D -m 0644 play.lua $PKG/usr/doc/$PKGNAME-$VERSION/play.lua
  )
fi
if [ "$perl" ]; then
  ( cd $TMP/$PKGNAME-$VERSION/src/swig/perl
    install -D -m 0644 mlt.pm $PKG/usr/share/perl5/mlt.pm
    install -D -m 0755 play.pl $PKG/usr/share/perl5/play.pl
    install -D -m 0755 blib/arch/auto/mlt/mlt.so \
      $PKG/usr/lib$LIBDIRSUFFIX/perl5/auto/mlt/mlt.so
    install -D -m 0644 mlt.bs \
      $PKG/usr/lib$LIBDIRSUFFIX/perl5/auto/mlt/mlt.bs
  )
fi
if [ "$php" ]; then
  ( cd $TMP/$PKGNAME-$VERSION/src/swig/php
    install -D -m 0755 mlt.so $PKG/usr/lib$LIBDIRSUFFIX/php/extensions/mlt.so
    install -D -m 0644 play.php $PKG/usr/doc/$PKGNAME-$VERSION/play.php
    mkdir -p $PKG/etc/php.d
    cat > $PKG/etc/php.d/$PKGNAME.ini.new << EOF
; Enable mlt extension module
; extension=$PKGNAME.so
EOF
  )
  echo "config etc/php.d/$PKGNAME.ini.new" >> $CWD/doinst.sh
fi
if [ "$python" ]; then
  PYTHONSITEPKG=$(python -c "import sys, os; print os.path.join('/usr/lib${LIBDIRSUFFIX}', 'python%s' % sys.version[:3], 'site-packages')")
  ( cd $TMP/$PKGNAME-$VERSION/src/swig/python
    install -D -m 0755 _mlt.so $PKG/$PYTHONSITEPKG/_mlt.so
    install -D -m 0755 mlt.py $PKG/$PYTHONSITEPKG/mlt.py
    install -D -m 0755 play.py $PKG/usr/doc/$PKGNAME-$VERSION/play.py
  )
fi
if [ "$ruby" ]; then
  ( cd $TMP/$PKGNAME-$VERSION/src/swig/ruby
    install -D -m 0755 mlt.so \
      $PKG$(ruby -e 'print RbConfig::CONFIG["sitearchdir"]')/mlt.so
    install -D -m 0755 play.rb $PKG/usr/doc/$PKGNAME-$VERSION/play.rb
    install -D -m 0755 thumbs.rb $PKG/usr/doc/$PKGNAME-$VERSION/thumbs.rb
  )
fi
if [ "$tcl" ]; then
  ( cd $TMP/$PKGNAME-$VERSION/src/swig/tcl
    . /usr/lib$LIBDIRSUFFIX/tclConfig.sh
    install -D -m 0755 mlt.so \
      $PKG/usr/lib$LIBDIRSUFFIX/tcl$TCL_MAJOR_VERSION/$TCL_VERSION/mlt.so
    install -D -m 0755 play.tcl $PKG/usr/doc/$PKGNAME-$VERSION/play.tcl
  )
fi

# todo: java, csharp

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

# Also add the slack-desk file to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Add documentation files: readme, changelog and so on
if [ ! -e $PKG/usr/doc/$PKGNAME-$VERSION ]; then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION || exit 1
fi
cp -a ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README TODO $PKG/usr/doc/$PKGNAME-$VERSION

# Also add the slackbuild files to the package
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

cat <<EOINS >> $PKG/install/doinst.sh
# Handle the incoming configuration files:
config() {
  for infile in \$1; do
    NEW="\$infile"
    OLD="\`dirname \$NEW\`/\`basename \$NEW .new\`"
    # If there's no config file by that name, mv it over:
    if [ ! -r \$OLD ]; then
      mv \$NEW \$OLD
    elif [ "\`cat \$OLD | md5sum\`" = "\`cat \$NEW | md5sum\`" ]; then
      # toss the redundant copy
      rm \$NEW
    fi
    # Otherwise, we leave the .new copy for the admin to consider...
  done
}

config etc/php.d/mlt.ini.new

EOINS

# Building some post-install execution script 	
	echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/gtk-update-icon-cache ]; then
  /usr/bin/gtk-update-icon-cache  -f -q /usr/share/icons/hicolor &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh

# Compress the man pages if present
if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

# Find and print dependencies into slack-required file
#cd $PKG
#if [ -x /usr/bin/requiredbuilder ];then
#   requiredbuilder -y -v -b -s  $CWD $PKG
#fi

# Create txz package
ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz} " || exit 1
if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi

