#!/bin/sh
# Heavily based on the Slackware 14.2 SlackBuild
# 
# Created by: Eric Hamless
# 
# Modified by: Skin Mox
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#
# Official Site: http://handbrake.fr/
#

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=HandBrake
PKGNAME1=handbrake
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-0.10.5}
ARCH=${ARCH:-$(uname -m)}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}

SOURCE="https://handbrake.fr/mirror/$PKGNAME-$VERSION.tar.bz2"

SOURCE1=cmake-3.0.1.tar.gz
SOURCE2=fdk-aac-v0.1.1-6-gbae4553.tar.bz2
SOURCE3=fribidi-0.19.2.tar.gz
SOURCE4=lame-3.98.tar.gz
SOURCE5=libass-0.10.0-1.tar.gz
SOURCE6=libav-v10.1.tar.bz2
SOURCE7=libbluray-0.5.0.tar.bz2
SOURCE8=libdvdnav-5.0.1-0-gaa3659d.tar.gz
SOURCE9=libdvdread-5.0.0-6-gcb1ae87.tar.gz 
SOURCE10=libmfx-v2014.tar.bz2
SOURCE11=libvpx-v1.3.0.tar.bz2
SOURCE12=x264-r2479-dd79a61.tar.gz
SOURCE13=x265-9329-0d30d2641875-1.5.tar.bz2

URLSOURCE=http://download.handbrake.fr/handbrake/contrib

# Create directory sources
if [ ! -e $CWD/sources ]; then
   mkdir $CWD/sources || exit 1
fi

TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|.tgz|)$//')}

# Download source tarball HandBrake if still not present
if [ ! -e $CWD/$TAR ]; then
   wget -c $SOURCE -O "$CWD/$TAR" || exit 1
fi

# Download sources tarballs libs
if [ ! -e $CWD/sources/$SOURCE1 ]; then
   wget -c $URLSOURCE/$SOURCE1  || exit 1
   mv $SOURCE1 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE2 ]; then
   wget -c $URLSOURCE/$SOURCE2  || exit 1
   mv $SOURCE2 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE3 ]; then
   wget -c $URLSOURCE/$SOURCE3  || exit 1
   mv $SOURCE3 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE4 ]; then
   wget -c $URLSOURCE/$SOURCE4  || exit 1
   mv $SOURCE4 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE5 ]; then
   wget -c $URLSOURCE/$SOURCE5  || exit 1
   mv $SOURCE5 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE6 ]; then
   wget -c $URLSOURCE/$SOURCE6  || exit 1
   mv $SOURCE6 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE7 ]; then
   wget -c $URLSOURCE/$SOURCE7  || exit 1
   mv $SOURCE7 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE8 ]; then
   wget -c $URLSOURCE/$SOURCE8 || exit 1
   mv $SOURCE8 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE9 ]; then
   wget -c $URLSOURCE/$SOURCE9  || exit 1
   mv $SOURCE9 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE10 ]; then
   wget -c $URLSOURCE/$SOURCE10  || exit 1
   mv $SOURCE10 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE11 ]; then
   wget -c $URLSOURCE/$SOURCE11  || exit 1
   mv $SOURCE11 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE12 ]; then
   wget -c $URLSOURCE/$SOURCE12  || exit 1
   mv $SOURCE12 $CWD/sources || exit 1
fi
if [ ! -e $CWD/sources/$SOURCE13 ]; then
   wget -c $URLSOURCE/$SOURCE13  || exit 1
   mv $SOURCE13 $CWD/sources || exit 1
fi

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; 
  SLKLDFLAGS="-L/usr/lib64"; 
  LIBDIRSUFFIX="64"; 
  CHOST="x86_64"
fi

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT 

# Decompress the source tarball
cd $TMP
tar xvf $CWD/$TAR || exit 1
cd $DIR || exit 1

# Decompress the source tarballs libs
tar xvf $CWD/sources/${SOURCE1} -C contrib/cmake/     || exit 1
tar xvf $CWD/sources/${SOURCE2} -C contrib/fdk-aac    || exit 1
tar xvf $CWD/sources/${SOURCE3} -C contrib/fribidi    || exit 1
tar xvf $CWD/sources/${SOURCE4} -C contrib/lame       || exit 1
tar xvf $CWD/sources/${SOURCE5} -C contrib/libass      || exit 1
tar xvf $CWD/sources/${SOURCE6} -C contrib/           || exit 1
tar xvf $CWD/sources/${SOURCE7} -C contrib/libbluray  || exit 1
tar xvf $CWD/sources/${SOURCE8} -C contrib/libdvdnav  || exit 1
tar xvf $CWD/sources/${SOURCE9} -C contrib/libdvdread || exit 1
tar xvf $CWD/sources/${SOURCE10} -C contrib/libmfx    || exit 1
tar xvf $CWD/sources/${SOURCE11} -C contrib/libvpx    || exit 1
tar xvf $CWD/sources/${SOURCE12} -C contrib/x264      || exit 1
tar xvf $CWD/sources/${SOURCE13} -C contrib/x265      || exit 1


############## This part create by Alien Bob - http://www.slackware.com/~alien/slackbuilds/
WITH_GUI=${WITH_GUI:-"YES"}
if [ "$WITH_GUI" = "YES" -o "$WITH_GUI" = "yes" ]; then
  GUI_OPTS="--disable-gtk-update-checks"
else
  GUI_OPTS="--disable-gtk"
fi

patch -p1 < $CWD/patches/handbrake.static_modules.patch --verbose || exit 1

############## End


#############################################
#
# USE INTERNAL LIBS
#
#############################################
export CFLAGS="$SLKCFLAGS -fno-strict-aliasing -Wno-unused"
export CXXFLAGS="$CFLAGS -Wno-reorder"
export PATH="${PKG}/HandBrake-${VERSION}/build/contrib/bin:$PATH"
#############################################


echo -e "\E[0;32m#####                              \E[0;0m"
echo -e "\E[0;32m+++++ Start SlackBuild $PKGNAME    \E[0;0m"
echo -e "\E[0;32m#####                              \E[0;0m"

# Building package
   ./configure \
        --force \
        --strip="/bin/true" \
        --optimize=speed \
        --prefix=/usr \
        --enable-x265  \
        --enable-fdk-aac  \
        --enable-libav-aac \
        --launch \
        --launch-jobs=0 \
        ${GUI_OPTS} \ || exit 1

cd build
    make libhb/project.h || exit 1		
    make  2>&1 | tee build.log || exit 1
    make install DESTDIR=$PKG || exit 1
cd


############## This part create by Alien Bob - http://www.slackware.com/~alien/slackbuilds/

if [ "$WITH_GUI" = "YES" -o "$WITH_GUI" = "yes" ]; then
  # Add application bitmaps, not just a SVG:
  for i in 16 24 32 48 64 96 128; do
    mkdir -p $PKG/usr/share/icons/hicolor/${i}x${i}/apps
    convert $PKG/usr/share/icons/hicolor/scalable/apps/hb-icon.svg \
      -resize ${i}x${i} \
      $PKG/usr/share/icons/hicolor/${i}x${i}/apps/hb-icon.png
  done

  # Show an icon in the XFCE menu:
  mkdir -p $PKG/usr/share/pixmaps
  cp -a $PKG/usr/share/icons/hicolor/128x128/apps/hb-icon.png \
    $PKG/usr/share/pixmaps/

  # Remove this cache file, it will get in our way:
  [ -f $PKG/usr/share/icons/hicolor/icon-theme.cache ] \
    && rm -f $PKG/usr/share/icons/hicolor/icon-theme.cache

  # Add this to the doinst.sh:
  ! [ -d $PKG/install ] && mkdir -p $PKG/install
  cat <<EOT >> $PKG/install/doinst.sh
# Update the desktop database:
if [ -x usr/bin/update-desktop-database ]; then
  chroot . /usr/bin/update-desktop-database usr/share/applications > /dev/null 2> /dev/null
fi

# Update the mime database:
if [ -x usr/bin/update-mime-database ]; then
  chroot . /usr/bin/update-mime-database usr/share/mime 1> /dev/null 2> /dev/null
fi

# Update hicolor theme cache:
if [ -d usr/share/icons/hicolor ]; then
  if [ -x /usr/bin/gtk-update-icon-cache ]; then
    chroot . /usr/bin/gtk-update-icon-cache -f -t usr/share/icons/hicolor 1> /dev/null 2> /dev/null
  fi
fi

EOT
fi # End [ "$WITH_GUI" = "YES" -o "$WITH_GUI" = "yes" ]

############## End

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

# Also add the slack-desk file to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Add documentation files: readme, changelog and so on
if [ ! -e $PKG/usr/doc/$PKGNAME-$VERSION ]; then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION || exit 1
fi
cp -a ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README TODO $PKG/usr/doc/$PKGNAME-$VERSION

# Also add the slackbuild files to the package
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME1.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME1.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

# Compress the man pages if present
if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

# Find and print dependencies into slack-required file
cd $PKG
if [ -x /usr/bin/requiredbuilder ];then
  requiredbuilder -y -v -b -s  $CWD $PKG
fi

# Create txz package
ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n $OUTPUT/$PKGNAME1-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz} " || exit 1
if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi

