#!/bin/sh
# Heavily based on the Slackware 14.2 SlackBuild
#
# Created by: Jonathan Li <jonathan dot li at hotmail dot co dot uk>
#
#
# 
# 
# Modified by: Skin Mox <skin-mox@bol.com.br>
#  
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#
# Official Site: https://git.kernel.org/cgit/linux/kernel/git/jejb/sbsigntools.git/

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=sbsigntools
SRCNAME1=sbsigntools
VERSION1=${VERSION1:-0.7}
SRCNAME2=ccan
VERSION2=${VERSION2:-0.0.2}
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
ARCH=${ARCH:-$(uname -m)}
JOBS=${JOBS:--j5}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}
SUFFIX=${SUFFIX:-tar.gz}

SOURCE1="http://ponce.cc/slackware/sources/repo/$SRCNAME1-$VERSION1.$SUFFIX"
SOURCE2="http://ponce.cc/slackware/sources/repo/$SRCNAME2-$VERSION2.$SUFFIX"


TAR1=${TAR1:-$(basename $SOURCE1)}
DIR1=${DIR1:-$(echo "$TAR1"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|.tgz|)$//')}

TAR2=${TAR2:-$(basename $SOURCE2)}
DIR2=${DIR2:-$(echo "$TAR2"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|.tgz|)$//')}

if [ ! -e $CWD/$TAR1 ]; then
    echo -e "[\033[01;32m  Download source tarball  \033[01;37m] "
    echo ""
    echo ""
    sleep 2
fi

# Download source tarball if still not present
if [ ! -e $CWD/$TAR1 ]; then
   wget -c $SOURCE1 -O "$CWD/$TAR1" || exit 1
fi

if [ ! -e $CWD/$TAR2 ]; then
    echo -e "[\033[01;32m  Download source tarball  \033[01;37m] "
    echo ""
    echo ""
    sleep 2
fi

# Download source tarball if still not present
if [ ! -e $CWD/$TAR2 ]; then
   wget -c $SOURCE2 -O "$CWD/$TAR2" || exit 1
fi

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; 
  SLKLDFLAGS="-L/usr/lib64"; 
  LIBDIRSUFFIX="64"; 
  CHOST="x86_64"
fi

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT 

echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo -e "[\033[01;32m  Decompress the source tarball  \033[01;37m] "
echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
sleep 2

# Decompress the source tarball
cd $TMP
tar xvf $CWD/$TAR1 || exit 1
cd $DIR1 || exit 1
tar xvf $CWD/$TAR2 -C lib/ccan.git || exit 1

# Next 2 patches taken from
# https://build.opensuse.org/package/show/home:jejb1:UEFI/sbsigntools?rev=16
# Fixes build on 32-bit.
patch -p1 < $CWD/patches/fix_efi_arch.patch --verbose || exit 1

# Creates changelog and stops git from being called.
patch -p1 < $CWD/patches/autogen.patch --verbose || exit 1

# Suppress "not git repo messages"- they're evaluated by the makefile but don't
# actually get run so it's just noise.
patch -p1 < $CWD/patches/ccan_makefile.patch --verbose || exit 1
rm lib/ccan.git/Makefile-web

echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo -e "[\033[01;32m  Building  package  \033[01;37m] "
echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
sleep 2

./autogen.sh

# Building  package
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
     ./configure \
        --prefix=/usr \
        --mandir=/usr/man \
		--build=$CHOST-slackware-linux || exit 1

# In the wrong place for some reason.
cp lib/ccan.git/config.h lib/ccan || exit 1
		
make $JOBS 2>&1 | tee build.log || exit 1
make install DESTDIR=$PKG || exit 1

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

# Also add the slack-desk file to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Add documentation files: readme, changelog and so on
if [ ! -e $PKG/usr/doc/$PKGNAME-$VERSION ]; then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION || exit 1
fi
cp -a ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README TODO $PKG/usr/doc/$PKGNAME-$VERSION

# Also add the slackbuild files to the package
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

# Compress the man pages if present
if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

# Find and print dependencies into slack-required file
cd $PKG
if [ -x /usr/bin/requiredbuilder ];then
   requiredbuilder -y -v -b -s  $CWD $PKG
fi

echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
echo -e "[\033[01;32m  Create txz package  \033[01;37m] "
echo -e "\033[01;32m  \033[01;37m "
echo -e "\033[01;32m  \033[01;37m "
sleep 2

# Create txz package
ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n $OUTPUT/$PKGNAME-$VERSION1-$ARCH-$BUILD$TAG.${PKGTYPE:-txz} " || exit 1
if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi

