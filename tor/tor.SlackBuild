#!/bin/sh
# Heavily based on the Slackware 14.2 SlackBuild
#
# Created by: PhamtonX <https://github.com/PhantomX>
#
#
# 
# 
# Modified by: Skin Mox <skin-mox@bol.com.br>
# 
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#
# Official Site: https://www.torproject.org/
#

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=tor
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-`date +%Y%m%d`}
ARCH=${ARCH:-$(uname -m)}
JOBS=${JOBS:--j5}
BUILD=${BUILD:-1}
TAG=${TAG:-sm}

SRCURL="https://git.torproject.org/tor.git"
SOURCE="$PKGNAME-$VERSION.tar.xz"

# Download git
if [ ! -e $CWD/$SOURCE ]; then
    git clone ${SRCURL} || exit 1
    mv $PKGNAME $PKGNAME-$VERSION || exit 1
    tar -cvJf $PKGNAME-$VERSION.tar.xz $PKGNAME-$VERSION || exit 1
    rm -rf $PKGNAME-$VERSION
fi

grep --quiet '^toranon:' /etc/group && SB_HGROUP=1
grep --quiet '^toranon:' /etc/passwd && SB_HUSER=1

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; 
  SLKLDFLAGS=""; 
  LIBDIRSUFFIX=""; 
  CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; 
  SLKLDFLAGS="-L/usr/lib64"; 
  LIBDIRSUFFIX="64"; 
  CHOST="x86_64"
fi

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT 
cd $TMP

# Decompress the source tarball
cd $TMP
tar xvf $CWD/$SOURCE || exit 1
cd $PKGNAME-$VERSION || exit 1

echo -e "\E[0;32m#####                              \E[0;0m"
echo -e "\E[0;32m+++++ Start SlackBuild $PKGNAME    \E[0;0m"
echo -e "\E[0;32m#####                              \E[0;0m"

./autogen.sh

# Building  package
export LDFLAGS="-Wl,--as-needed ${LDFLAGS}"
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
     ./configure 	\
        --prefix=/usr \
        --libdir=/usr/lib${LIBDIRSUFFIX} \
        --sysconfdir=/etc \
        --localstatedir=/var \
        --infodir=/usr/info \
        --mandir=/usr/man \
        --docdir=/usr/doc/${PKGNAME}-${VERSION} \
        --disable-silent-rules \
        --disable-dependency-tracking \
        --with-tor-user=toranon \
        --with-tor-group=toranon \
		--build=$CHOST-slackware-linux || exit 1
		
make $JOBS 2>&1 | tee build.log || exit 1
make install DESTDIR=$PKG || exit 1

mv ${PKG}/etc/tor/torrc.{sample,new} || exit 1

mkdir -p ${PKG}/etc/logrotate.d
cat > ${PKG}/etc/logrotate.d/tor.new <<'EOF'
/var/log/tor/*.log {
    daily
    rotate 5
    compress
    delaycompress
    missingok
    notifempty
    create 0640 toranon toranon
    sharedscripts
    postrotate
    endscript
}
EOF

mkdir -p ${PKG}/var/{lib,log,run}/${PKGNAME}

mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.${PKGNAME} ${PKG}/etc/rc.d/rc.${PKGNAME}.new || exit 1
chmod 0644 ${PKG}/etc/rc.d/rc.${PKGNAME}.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${PKGNAME}.gz \
  > ${PKG}/var/log/setup/setup.onlyonce.rc${PKGNAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${PKGNAME} || exit 1

chmod 0640 ${PKG}/etc/tor/torrc*
chmod 0700 ${PKG}/var/lib/tor
chmod 0700 ${PKG}/var/log/tor
chmod 0755 ${PKG}/var/run/tor

rm -f ${PKG}/usr/bin/torify
rm -f ${PKG}/usr/man/man1/torify*
rm -f ${PKG}/etc/tor/tor-tsocks.conf

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

cat > ${PKG}/usr/share/tor/defaults-torrc <<'EOF'
DataDirectory /var/lib/tor
User toranon
Log notice syslog
EOF

mkdir -p ${PKG}/usr/lib/tmpfiles.d
cat > ${PKG}/usr/lib/tmpfiles.d/${PKGNAME}.conf <<EOF
d /run/${PKGNAME} 0755 toranon toranon
EOF

# Also add the slack-desk file to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Add documentation files: readme, changelog and so on
if [ ! -e $PKG/usr/doc/$PKGNAME-$VERSION ]; then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION || exit 1
fi
cp -a ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS  TODO $PKG/usr/doc/$PKGNAME-$VERSION

# Also add the slackbuild files to the package
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild
if [ -x $CWD/patches ];then
   mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   cp $CWD/patches/*  $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches
   chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/patches/*
fi

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 100 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}

function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^toranon:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            toranon 2> /dev/null
fi
# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^toranon:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/lib/tor:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "toranon"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -d '/var/lib/tor' \
            -u ${USER_ID} \
            -s /bin/false \
            ${OLD_USER}
else
  # Add new user
  ${CHROOT} /usr/sbin/useradd \
            -c 'TOR anonymizing user' \
            -u $(free_user_id) \
            -g toranon \
            -s /bin/false \
            -d '/var/lib/tor' \
            toranon 2> /dev/null
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${PKGNAME}.new:
if [ -r etc/rc.d/rc.${PKGNAME} -a -r etc/rc.d/rc.${PKGNAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${PKGNAME} etc/rc.d/rc.${PKGNAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions
${CHROOT} /bin/chown root.toranon /etc/tor/torrc*
${CHROOT} /bin/chmod 0640 /etc/tor/torrc*

${CHROOT} /bin/chown toranon.toranon /var/lib/tor
${CHROOT} /bin/chmod 0700 /var/lib/tor
${CHROOT} /bin/chown toranon.toranon /var/log/tor
${CHROOT} /bin/chmod 0700 /var/log/tor
${CHROOT} /bin/chown toranon.toranon /var/run/tor

EOF

# Compress the man pages if present
if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

# Find and print dependencies into slack-required file
cd $PKG
if [ -x /usr/bin/requiredbuilder ];then
   requiredbuilder -y -v -b -s  $CWD $PKG
fi

# Create txz package
ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz} " || exit 1
if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi

